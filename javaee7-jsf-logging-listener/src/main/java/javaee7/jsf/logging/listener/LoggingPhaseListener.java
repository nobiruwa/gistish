/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javaee7.jsf.logging.listener;

import java.util.Map;

import javax.faces.component.UIViewRoot;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;
import java.util.logging.Logger;

/**
 * <lifecycle>
 * <phase-listener>javaee7.jsf.logging.listener.LoggingPhaseListener</phase-listener>
 * </lifecycle>
 */
public class LoggingPhaseListener implements PhaseListener {
    /**
     *
     */
    private static final long serialVersionUID = 7896550322450821498L;

    private static final Logger logger = Logger.getLogger("LoggingPhaseListenerLogger");

    public void afterPhase(final PhaseEvent event) {
        printLog(event, "after phase:");
    }

    public void beforePhase(final PhaseEvent event) {
        printLog(event, "before phase:");
    }

    protected void printLog(final PhaseEvent event, final String msg) {
        try {
            final UIViewRoot view = event.getFacesContext().getViewRoot();
            String viewID = "no view";
            if (view != null) {
                viewID = view.getViewId();
            }

            printLine(msg + event.getPhaseId() + " " + viewID);

            printRequestParameters(event);
            printRequestAttributes(event);
            printSessionAttributes(event);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    private void printSessionAttributes(final PhaseEvent event) {
        final Map<String, Object> sessAttrs = event.getFacesContext().getExternalContext().getSessionMap();
        final StringBuilder sb = new StringBuilder();
        for (final String key : sessAttrs.keySet()) {
            sb.append("(" + key + "=" + sessAttrs.get(key) + ") ");
        }
        printLine("Session Attributes : " + sb.toString());
    }

    private void printRequestAttributes(final PhaseEvent event) {
        final Map<String, Object> reqAttrs = event.getFacesContext().getExternalContext().getRequestMap();
        final StringBuilder sb = new StringBuilder();
        for (final String key : reqAttrs.keySet()) {
            sb.append("(" + key + "=" + reqAttrs.get(key) + ") ");
        }
        printLine("Request Attributes : " + sb.toString());
    }

    private void printRequestParameters(final PhaseEvent event) {
        final Map<String, String> reqParams = event.getFacesContext().getExternalContext().getRequestParameterMap();
        final StringBuilder sb = new StringBuilder();
        for (final String key : reqParams.keySet()) {
            sb.append("(" + key + "=" + reqParams.get(key) + ") ");
        }
        printLine("Request Parameters : " + sb.toString());
    }

    public PhaseId getPhaseId() {
        return PhaseId.ANY_PHASE;
    }

    private void printLine(final String message) {
        logger.info(message);
    }
}
